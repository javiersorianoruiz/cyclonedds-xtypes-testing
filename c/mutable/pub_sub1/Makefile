# Makefile

#compilation info enabled with execution: V=1 make
ifeq ($(V),1)
Q :=
else
Q := @
endif

#Compilation, autogeneration de code and linking parameteres
CC = gcc #compilador C
CFLAGS = -MMD -Wall -Wextra -I/usr/local/lib/cyclonedds/include/
LDLIBS = -lddsc -L/usr/local/lib/cyclonedds/lib/
IDLC = /usr/local/lib/cyclonedds/bin/idlc
IDLC_PARAMETERS = -Wno-implicit-extensibility
BUILD_DIR = build
IDL_FILE = test.idl

#Name binaries and files to be compile
TARGET_PUBLISHER = mutable_publisher1
TARGET_SUBSCRIBER = mutable_subscriber1
SRC_PUBLISHER = publisher.c
SRC_SUBSCRIBER= subscriber.c
OBJ_PUBLISHER = $(IDL_FILE:%.idl=$(BUILD_DIR)/%.o) ${SRC_PUBLISHER:%.c=$(BUILD_DIR)/%.o}
DEP_PUBLISHER = ${SRC_PUBLISHER:%.c=$(BUILD_DIR)/%.d}
OBJ_SUBSCRIBER = $(IDL_FILE:%.idl=$(BUILD_DIR)/%.o) ${SRC_SUBSCRIBER:%.c=$(BUILD_DIR)/%.o}
DEP_SUBSCRIBER = ${SRC_SUBSCRIBER:%.c=$(BUILD_DIR)/%.d}

#show values if V=1 (launching: V=1 make)
ifeq ($(V),1)
$(info $$SRC_PUBLISHER is [${SRC_PUBLISHER}])
$(info $$OBJ_PUBLISHER is [${OBJ_PUBLISHER}])
$(info $$DEP_PUBLISHER is [${DEP_PUBLISHER}])
$(info $$SRC_SUBSCRIBER is [${SRC_SUBSCRIBER}])
$(info $$OBJ_SUBSCRIBER is [${OBJ_SUBSCRIBER}])
$(info $$DEP_SUBSCRIBER is [${DEP_SUBSCRIBER}])
endif


all: $(BUILD_DIR)/$(TARGET_PUBLISHER) $(BUILD_DIR)/$(TARGET_SUBSCRIBER)

#rule to autogenerate the C code with the IDLC tool 
$(BUILD_DIR)/$(IDL_FILE:.idl=.c): $(IDL_FILE) | $(BUILD_DIR)
	$(Q) echo Compiling with IDLC file IDL $(IDL_FILE) to generate $@
	$(Q) $(IDLC) $(IDLC_PARAMETERS) -o `pwd`/$(BUILD_DIR) `pwd`/$(IDL_FILE)

#rule to compile the autogenerated C code by the IDLC tool
$(BUILD_DIR)/$(IDL_FILE:.idl=.o): CFLAGS = -Wall -Wextra -I/usr/local/lib/cyclonedds/include/
$(BUILD_DIR)/$(IDL_FILE:.idl=.o): $(BUILD_DIR)/$(IDL_FILE:.idl=.c) | $(BUILD_DIR)
	$(Q) echo Compiling autogenerated: $<
	$(Q) $(CC) $(CFLAGS) -c $< -o $@

#rule to compile publisher.c and subscriber.c
$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR)
	$(Q) echo Compiling $<
	$(Q) $(CC) $(CFLAGS) -c $< -o $@

#rule to compile publisher.c
# $(BUILD_DIR)/publisher.o: publisher.c | $(BUILD_DIR)
# 	$(Q) echo Compiling $<
# 	$(Q) $(CC) $(CFLAGS) -c $< -o $@

#rule to compile subscriber.c
# $(BUILD_DIR)/subscriber.o: subscriber.c | $(BUILD_DIR)
# 	$(Q) echo Compiling $<
# 	$(Q) $(CC) $(CFLAGS) -c $< -o $@

$(BUILD_DIR):
	mkdir -p $@

#rule for TARGET_PUBLISHER linking , $(BUILD_DIR) is created if not exist
#Remember:
# $@ : target
# $^ : all pre-requisites
# $< : first pre-requisite
$(BUILD_DIR)/$(TARGET_PUBLISHER): ${OBJ_PUBLISHER} | $(BUILD_DIR)
	$(Q) echo Linking $@
	$(Q) $(CC) -o $@ $^ ${LDLIBS}

-include ${DEP_PUBLISHER}

#rule for TARGET_SUBSCRIBER linking
$(BUILD_DIR)/$(TARGET_SUBSCRIBER): ${OBJ_SUBSCRIBER} | $(BUILD_DIR)
	$(Q) echo Linking $@
	$(Q) $(CC) -o $@ $^ ${LDLIBS}

-include ${DEP_SUBSCRIBER}


.PHONY: clean

clean:
	$(Q) echo make clean: deleting files directory $(BUILD_DIR)
	$(Q) ${RM} ${OBJ_PUBLISHER} ${OBJ_SUBSCRIBER}   # remove object files
	$(Q) ${RM} ${DEP_PUBLISHER} ${DEP_SUBSCRIBER}   # remove dependence files
	$(Q) ${RM} $(BUILD_DIR)/$(IDL_FILE:.idl=.c) $(BUILD_DIR)/$(IDL_FILE:.idl=.h)
	$(Q) ${RM} $(BUILD_DIR)/$(TARGET_PUBLISHER) $(BUILD_DIR)/$(TARGET_SUBSCRIBER)    # remove main program

# END